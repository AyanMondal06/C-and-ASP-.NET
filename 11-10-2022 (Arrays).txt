Arrays:
it is data structure contains collection of variables of same data type.



int mark1;
int mark2;
int mark3;
int mark4;
int mark5;

int mark[5];

mark[0]  mark[1]   mark[2]   mark[3]   mark[4]


1. one dimensional

int[] mark=new int[5];

int[] mark=new int[5] { 34,67,87,34,90};


eg:
  int[] mark = new int[5] { 67, 34, 78, 82, 17 };
            // mark[0] = 67 ,mark [1] = 34 ,mark[2] =78, mark[3] = 82 , mark[4] = 17

            Console.WriteLine(mark[0]);
            Console.WriteLine(mark[1]);
            Console.WriteLine(mark[2]);
            Console.WriteLine(mark[3]);
            Console.WriteLine(mark[4]);


//string array
 string[] name = new string[5] { "christy", "ruby", "sherin", "john", "david" };

            for (int i = 0; i < 5; i++)
                Console.WriteLine(name[i]);


2. multidimensional 


two types 1. 

rectangular - table or matrix - first subscript- no. of rows , no. of columns.

jagged

		
		col1		col2
		0		1

1st  0		0,0		0,1

2rw   1		1,0		1,1

3rw   2		2,0		2,1

4rw   3		3,0		3,1

5rw    4	4,0		4,1



   int[,] mark = new int[5, 2]
            {
                {56,89 },
                {34,68 },
                {23,89 },
                {28,63 },
                {90,23 }


            };


            Console.WriteLine(mark[0, 0] + "\t " + mark[0, 1]);
            Console.WriteLine(mark[1, 0] + "\t " + mark[1, 1]);
            Console.WriteLine(mark[2, 0] + "\t " + mark[2, 1]);
            Console.WriteLine(mark[3, 0] + "\t " + mark[3, 1]);
            Console.WriteLine(mark[4, 0] + "\t " + mark[4, 1]);



3. jagged array.(Array of Arrays)


  int[][] mark = new int[3][];
            mark[0] = new int[2] { 1, 2 };
            mark[1] = new int[3] { 6, 2, 7 };
            mark[2] = new int[4] { 1, 2, 3, 4 };


            for (int i = 0; i < mark.Length; i++)
            {
                for (int j = 0; j < mark[i].Length; j++)
                {
                    Console.Write(mark[i][j] + "\t");
                }

                Console.WriteLine();


            }



sealed Method - this method can't be overridden by derived class

Note: sealed keyword it must come with override keyword.





 internal class Program
    {
        static void Main(string[] args)
        {
            C obj = new C();
            obj.show();
          
        }
    }

    class A
    {

        int a = 10;
        public virtual void show()
        {
            Console.WriteLine(a);

        }



    }
    class B :A
    {

        int b=20;
        
        public sealed  override void show()
        {
            base.show();
            Console.WriteLine(b);
        }

    }

    class C : B
    {
        int c = 30;


        public override void show()
        {
            base.show();
            Console.WriteLine(c);
        }







    }


this keyword : It is used to differentiate instance variable from formal parameters when both  are same.

this keyword should come before instance variable.


   internal class Program
    {
        static void Main(string[] args)
        {
            Math obj = new Math();
            obj.Addition(4, 6);
          
        }
    }

   class Math
    {

        int a, b;//data members, attributes, instance variables
        public void Addition(int a,int b)// member function,
        {

            this.a = a;
            this.b = b;
            Console.WriteLine("Addition of two numbers" + (a + b));



        }





    }



